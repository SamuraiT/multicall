/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { Multicall2, Multicall2Interface } from "../Multicall2";

const _abi = [
  {
    constant: true,
    inputs: [],
    name: "getCurrentBlockTimestamp",
    outputs: [
      {
        name: "timestamp",
        type: "uint256",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: false,
    inputs: [
      {
        components: [
          {
            name: "target",
            type: "address",
          },
          {
            name: "callData",
            type: "bytes",
          },
        ],
        name: "calls",
        type: "tuple[]",
      },
    ],
    name: "aggregate",
    outputs: [
      {
        name: "blockNumber",
        type: "uint256",
      },
      {
        name: "returnData",
        type: "bytes[]",
      },
    ],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "getLastBlockHash",
    outputs: [
      {
        name: "blockHash",
        type: "bytes32",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: false,
    inputs: [
      {
        name: "requireSuccess",
        type: "bool",
      },
      {
        components: [
          {
            name: "target",
            type: "address",
          },
          {
            name: "callData",
            type: "bytes",
          },
        ],
        name: "calls",
        type: "tuple[]",
      },
    ],
    name: "tryBlockAndAggregate",
    outputs: [
      {
        name: "blockNumber",
        type: "uint256",
      },
      {
        name: "blockHash",
        type: "bytes32",
      },
      {
        components: [
          {
            name: "success",
            type: "bool",
          },
          {
            name: "returnData",
            type: "bytes",
          },
        ],
        name: "returnData",
        type: "tuple[]",
      },
    ],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "getBlockNumber",
    outputs: [
      {
        name: "blockNumber",
        type: "uint256",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [
      {
        name: "addr",
        type: "address",
      },
    ],
    name: "getEthBalance",
    outputs: [
      {
        name: "balance",
        type: "uint256",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "getCurrentBlockDifficulty",
    outputs: [
      {
        name: "difficulty",
        type: "uint256",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "getCurrentBlockGasLimit",
    outputs: [
      {
        name: "gaslimit",
        type: "uint256",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "getCurrentBlockCoinbase",
    outputs: [
      {
        name: "coinbase",
        type: "address",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: false,
    inputs: [
      {
        name: "requireSuccess",
        type: "bool",
      },
      {
        components: [
          {
            name: "target",
            type: "address",
          },
          {
            name: "callData",
            type: "bytes",
          },
        ],
        name: "calls",
        type: "tuple[]",
      },
    ],
    name: "tryAggregate",
    outputs: [
      {
        components: [
          {
            name: "success",
            type: "bool",
          },
          {
            name: "returnData",
            type: "bytes",
          },
        ],
        name: "returnData",
        type: "tuple[]",
      },
    ],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: false,
    inputs: [
      {
        components: [
          {
            name: "target",
            type: "address",
          },
          {
            name: "callData",
            type: "bytes",
          },
        ],
        name: "calls",
        type: "tuple[]",
      },
    ],
    name: "blockAndAggregate",
    outputs: [
      {
        name: "blockNumber",
        type: "uint256",
      },
      {
        name: "blockHash",
        type: "bytes32",
      },
      {
        components: [
          {
            name: "success",
            type: "bool",
          },
          {
            name: "returnData",
            type: "bytes",
          },
        ],
        name: "returnData",
        type: "tuple[]",
      },
    ],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: true,
    inputs: [
      {
        name: "blockNumber",
        type: "uint256",
      },
    ],
    name: "getBlockHash",
    outputs: [
      {
        name: "blockHash",
        type: "bytes32",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610ee9806100206000396000f3fe6080604052600436106100ba576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630f28c97d146100bf578063252dba42146100ea57806327e86d6e14610128578063399542e91461015357806342cbb15c146101925780634d2301cc146101bd57806372425d9d146101fa57806386d516e814610225578063a8b0574e14610250578063bce38bd71461027b578063c3077fa9146102b8578063ee82ac5e146102f7575b600080fd5b3480156100cb57600080fd5b506100d4610334565b6040516100e19190610c83565b60405180910390f35b3480156100f657600080fd5b50610111600480360361010c919081019061090e565b61033c565b60405161011f929190610c9e565b60405180910390f35b34801561013457600080fd5b5061013d6104f0565b60405161014a9190610c28565b60405180910390f35b34801561015f57600080fd5b5061017a6004803603610175919081019061094f565b6104fc565b60405161018993929190610cce565b60405180910390f35b34801561019e57600080fd5b506101a761051b565b6040516101b49190610c83565b60405180910390f35b3480156101c957600080fd5b506101e460048036036101df91908101906108e5565b610523565b6040516101f19190610c83565b60405180910390f35b34801561020657600080fd5b5061020f610544565b60405161021c9190610c83565b60405180910390f35b34801561023157600080fd5b5061023a61054c565b6040516102479190610c83565b60405180910390f35b34801561025c57600080fd5b50610265610554565b6040516102729190610beb565b60405180910390f35b34801561028757600080fd5b506102a2600480360361029d919081019061094f565b61055c565b6040516102af9190610c06565b60405180910390f35b3480156102c457600080fd5b506102df60048036036102da919081019061090e565b61072f565b6040516102ee93929190610cce565b60405180910390f35b34801561030357600080fd5b5061031e600480360361031991908101906109a3565b610752565b60405161032b9190610c28565b60405180910390f35b600042905090565b60006060439150825160405190808252806020026020018201604052801561037857816020015b60608152602001906001900390816103635790505b50905060008090505b83518110156104ea5760006060858381518110151561039c57fe5b906020019060200201516000015173ffffffffffffffffffffffffffffffffffffffff1686848151811015156103ce57fe5b90602001906020020151602001516040518082805190602001908083835b60208310151561041157805182526020820191506020810190506020830392506103ec565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114610473576040519150601f19603f3d011682016040523d82523d6000602084013e610478565b606091505b50915091508115156104bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104b690610c63565b60405180910390fd5b8084848151811015156104ce57fe5b9060200190602002018190525050508080600101915050610381565b50915091565b60006001430340905090565b600080606043925043409150610512858561055c565b90509250925092565b600043905090565b60008173ffffffffffffffffffffffffffffffffffffffff16319050919050565b600044905090565b600045905090565b600041905090565b6060815160405190808252806020026020018201604052801561059957816020015b61058661075d565b81526020019060019003908161057e5790505b50905060008090505b8251811015610728576000606084838151811015156105bd57fe5b906020019060200201516000015173ffffffffffffffffffffffffffffffffffffffff1685848151811015156105ef57fe5b90602001906020020151602001516040518082805190602001908083835b602083101515610632578051825260208201915060208101905060208303925061060d565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114610694576040519150601f19603f3d011682016040523d82523d6000602084013e610699565b606091505b509150915085156106e7578115156106e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106dd90610c43565b60405180910390fd5b5b6040805190810160405280831515815260200182815250848481518110151561070c57fe5b90602001906020020181905250505080806001019150506105a2565b5092915050565b600080606061073f6001856104fc565b8093508194508295505050509193909250565b600081409050919050565b6040805190810160405280600015158152602001606081525090565b60006107858235610e34565b905092915050565b600082601f83011215156107a057600080fd5b81356107b36107ae82610d39565b610d0c565b9150818183526020840193506020810190508360005b838110156107f957813586016107df888261086d565b8452602084019350602083019250506001810190506107c9565b5050505092915050565b600061080f8235610e46565b905092915050565b600082601f830112151561082a57600080fd5b813561083d61083882610d61565b610d0c565b9150808252602083016020830185838301111561085957600080fd5b610864838284610e5c565b50505092915050565b60006040828403121561087f57600080fd5b6108896040610d0c565b9050600061089984828501610779565b600083015250602082013567ffffffffffffffff8111156108b957600080fd5b6108c584828501610817565b60208301525092915050565b60006108dd8235610e52565b905092915050565b6000602082840312156108f757600080fd5b600061090584828501610779565b91505092915050565b60006020828403121561092057600080fd5b600082013567ffffffffffffffff81111561093a57600080fd5b6109468482850161078d565b91505092915050565b6000806040838503121561096257600080fd5b600061097085828601610803565b925050602083013567ffffffffffffffff81111561098d57600080fd5b6109998582860161078d565b9150509250929050565b6000602082840312156109b557600080fd5b60006109c3848285016108d1565b91505092915050565b6109d581610de2565b82525050565b60006109e682610da7565b808452602084019350836020820285016109ff85610d8d565b60005b84811015610a38578383038852610a1a838351610ad5565b9250610a2582610dc8565b9150602088019750600181019050610a02565b508196508694505050505092915050565b6000610a5482610db2565b80845260208401935083602082028501610a6d85610d9a565b60005b84811015610aa6578383038852610a88838351610b9f565b9250610a9382610dd5565b9150602088019750600181019050610a70565b508196508694505050505092915050565b610ac081610df4565b82525050565b610acf81610e00565b82525050565b6000610ae082610dbd565b808452610af4816020860160208601610e6b565b610afd81610e9e565b602085010191505092915050565b6000602182527f4d756c746963616c6c32206167677265676174653a2063616c6c206661696c6560208301527f64000000000000000000000000000000000000000000000000000000000000006040830152606082019050919050565b6000602082527f4d756c746963616c6c206167677265676174653a2063616c6c206661696c65646020830152604082019050919050565b6000604083016000830151610bb76000860182610ab7565b5060208301518482036020860152610bcf8282610ad5565b9150508091505092915050565b610be581610e2a565b82525050565b6000602082019050610c0060008301846109cc565b92915050565b60006020820190508181036000830152610c208184610a49565b905092915050565b6000602082019050610c3d6000830184610ac6565b92915050565b60006020820190508181036000830152610c5c81610b0b565b9050919050565b60006020820190508181036000830152610c7c81610b68565b9050919050565b6000602082019050610c986000830184610bdc565b92915050565b6000604082019050610cb36000830185610bdc565b8181036020830152610cc581846109db565b90509392505050565b6000606082019050610ce36000830186610bdc565b610cf06020830185610ac6565b8181036040830152610d028184610a49565b9050949350505050565b6000604051905081810181811067ffffffffffffffff82111715610d2f57600080fd5b8060405250919050565b600067ffffffffffffffff821115610d5057600080fd5b602082029050602081019050919050565b600067ffffffffffffffff821115610d7857600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b6000602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000610ded82610e0a565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610e3f82610e0a565b9050919050565b60008115159050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015610e89578082015181840152602081019050610e6e565b83811115610e98576000848401525b50505050565b6000601f19601f830116905091905056fea265627a7a723058206c562c2824e9d4e39589b2610f4e31d6d1e872ad43b889021edfb56465e0d84a6c6578706572696d656e74616cf50037";

type Multicall2ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: Multicall2ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Multicall2__factory extends ContractFactory {
  constructor(...args: Multicall2ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Multicall2> {
    return super.deploy(overrides || {}) as Promise<Multicall2>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Multicall2 {
    return super.attach(address) as Multicall2;
  }
  override connect(signer: Signer): Multicall2__factory {
    return super.connect(signer) as Multicall2__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): Multicall2Interface {
    return new utils.Interface(_abi) as Multicall2Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Multicall2 {
    return new Contract(address, _abi, signerOrProvider) as Multicall2;
  }
}
